package dataClasses.episode;

import com.datastax.oss.driver.api.core.CqlIdentifier;
import com.datastax.oss.driver.api.core.data.CqlDuration;
import com.datastax.oss.driver.api.core.data.GettableByName;
import com.datastax.oss.driver.api.core.data.SettableByName;
import com.datastax.oss.driver.api.core.metadata.schema.KeyspaceMetadata;
import com.datastax.oss.driver.api.core.metadata.schema.TableMetadata;
import com.datastax.oss.driver.api.core.type.DataType;
import com.datastax.oss.driver.api.core.type.UserDefinedType;
import com.datastax.oss.driver.api.core.type.reflect.GenericType;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.MapperException;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.api.querybuilder.QueryBuilder;
import com.datastax.oss.driver.api.querybuilder.delete.Delete;
import com.datastax.oss.driver.api.querybuilder.delete.DeleteSelection;
import com.datastax.oss.driver.api.querybuilder.insert.InsertInto;
import com.datastax.oss.driver.api.querybuilder.insert.RegularInsert;
import com.datastax.oss.driver.api.querybuilder.relation.Relation;
import com.datastax.oss.driver.api.querybuilder.select.Select;
import com.datastax.oss.driver.api.querybuilder.select.SelectFrom;
import com.datastax.oss.driver.api.querybuilder.update.UpdateStart;
import com.datastax.oss.driver.internal.mapper.entity.EntityHelperBase;
import com.datastax.oss.driver.internal.querybuilder.update.DefaultUpdate;
import com.datastax.oss.driver.shaded.guava.common.collect.ImmutableList;
import java.lang.Boolean;
import java.lang.Class;
import java.lang.IllegalArgumentException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.time.Instant;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
public class EpisodeByPodcastRecordHelper__MapperGenerated extends EntityHelperBase<EpisodeByPodcastRecord> {
  private static final Logger LOG = LoggerFactory.getLogger(EpisodeByPodcastRecordHelper__MapperGenerated.class);

  private static final GenericType<Set<String>> GENERIC_TYPE = new GenericType<Set<String>>(){};

  private static final GenericType<Integer> GENERIC_TYPE1 = new GenericType<Integer>(){};

  private static final GenericType<Boolean> GENERIC_TYPE2 = new GenericType<Boolean>(){};

  private static final GenericType<LocalDate> GENERIC_TYPE3 = new GenericType<LocalDate>(){};

  private static final GenericType<String> GENERIC_TYPE4 = new GenericType<String>(){};

  private static final GenericType<CqlDuration> GENERIC_TYPE5 = new GenericType<CqlDuration>(){};

  private static final GenericType<Instant> GENERIC_TYPE6 = new GenericType<Instant>(){};

  private final List<String> primaryKeys;

  public EpisodeByPodcastRecordHelper__MapperGenerated(MapperContext context) {
    super(context, "episodes_by_podcast");
    LOG.debug("[{}] Entity EpisodeByPodcastRecord will be mapped to {}{}",
        context.getSession().getName(),
        getKeyspaceId() == null ? "" : getKeyspaceId() + ".",
        getTableId());
    this.primaryKeys = ImmutableList.<String>builder()
        .add("podcast_api")
        .add("podcast_api_id")
        .add("episode_guid")
        .build();
  }

  @Override
  public Class<EpisodeByPodcastRecord> getEntityClass() {
    return EpisodeByPodcastRecord.class;
  }

  @Override
  public <SettableT extends SettableByName<SettableT>> SettableT set(EpisodeByPodcastRecord entity,
      SettableT target, NullSavingStrategy nullSavingStrategy) {

    if (entity.getPodcastApi() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("podcast_api", entity.getPodcastApi(), String.class);
    }

    if (entity.getPodcastApiId() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("podcast_api_id", entity.getPodcastApiId(), String.class);
    }

    if (entity.getEpisodeGuid() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("episode_guid", entity.getEpisodeGuid(), String.class);
    }

    if (entity.getSummary() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("summary", entity.getSummary(), String.class);
    }

    if (entity.getPodcastWebsiteUrl() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("podcast_website_url", entity.getPodcastWebsiteUrl(), String.class);
    }

    if (entity.getDuration() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("duration", entity.getDuration(), CqlDuration.class);
    }

    if (entity.getSubtitle() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("subtitle", entity.getSubtitle(), String.class);
    }

    if (entity.getOrderNum() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("order_num", entity.getOrderNum(), Integer.class);
    }

    if (entity.getImageUrl() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("image_url", entity.getImageUrl(), String.class);
    }

    if (entity.getEpisodeType() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("episode_type", entity.getEpisodeType(), String.class);
    }

    if (entity.getEpisodeNum() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("episode_num", entity.getEpisodeNum(), Integer.class);
    }

    if (entity.getSeasonNum() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("season_num", entity.getSeasonNum(), Integer.class);
    }

    if (entity.getTitle() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("title", entity.getTitle(), String.class);
    }

    if (entity.getAuthor() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("author", entity.getAuthor(), String.class);
    }

    if (entity.getKeywords() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("keywords", entity.getKeywords(), GENERIC_TYPE);
    }

    target = target.setBoolean("explicit", entity.isExplicit());

    target = target.setBoolean("closed_captioned", entity.isClosedCaptioned());

    if (entity.getUpdatedAt() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("updated_at", entity.getUpdatedAt(), Instant.class);
    }

    if (entity.getEpisodeUrl() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("episode_url", entity.getEpisodeUrl(), String.class);
    }

    if (entity.getDescription() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("description", entity.getDescription(), String.class);
    }

    if (entity.getContent() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("content", entity.getContent(), String.class);
    }

    if (entity.getComments() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("comments", entity.getComments(), String.class);
    }

    if (entity.getEpisodeUpdatedDate() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("episode_updated_date", entity.getEpisodeUpdatedDate(), LocalDate.class);
    }

    if (entity.getPublishedDate() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("published_date", entity.getPublishedDate(), LocalDate.class);
    }

    return target;
  }

  @Override
  public EpisodeByPodcastRecord get(GettableByName source) {
    EpisodeByPodcastRecord returnValue = new EpisodeByPodcastRecord();

    returnValue.setPodcastApi(source.get("podcast_api", String.class));

    returnValue.setPodcastApiId(source.get("podcast_api_id", String.class));

    returnValue.setEpisodeGuid(source.get("episode_guid", String.class));

    returnValue.setSummary(source.get("summary", String.class));

    returnValue.setPodcastWebsiteUrl(source.get("podcast_website_url", String.class));

    returnValue.setDuration(source.get("duration", CqlDuration.class));

    returnValue.setSubtitle(source.get("subtitle", String.class));

    returnValue.setOrderNum(source.get("order_num", Integer.class));

    returnValue.setImageUrl(source.get("image_url", String.class));

    returnValue.setEpisodeType(source.get("episode_type", String.class));

    returnValue.setEpisodeNum(source.get("episode_num", Integer.class));

    returnValue.setSeasonNum(source.get("season_num", Integer.class));

    returnValue.setTitle(source.get("title", String.class));

    returnValue.setAuthor(source.get("author", String.class));

    returnValue.setKeywords(source.get("keywords", GENERIC_TYPE));

    returnValue.setExplicit(source.getBoolean("explicit"));

    returnValue.setClosedCaptioned(source.getBoolean("closed_captioned"));

    returnValue.setUpdatedAt(source.get("updated_at", Instant.class));

    returnValue.setEpisodeUrl(source.get("episode_url", String.class));

    returnValue.setDescription(source.get("description", String.class));

    returnValue.setContent(source.get("content", String.class));

    returnValue.setComments(source.get("comments", String.class));

    returnValue.setEpisodeUpdatedDate(source.get("episode_updated_date", LocalDate.class));

    returnValue.setPublishedDate(source.get("published_date", LocalDate.class));
    return returnValue;
  }

  @Override
  public RegularInsert insert() {
    throwIfKeyspaceMissing();
    InsertInto insertInto = (keyspaceId == null)
        ? QueryBuilder.insertInto(tableId)
        : QueryBuilder.insertInto(keyspaceId, tableId);
    return insertInto
        .value("podcast_api", QueryBuilder.bindMarker("podcast_api"))
        .value("podcast_api_id", QueryBuilder.bindMarker("podcast_api_id"))
        .value("episode_guid", QueryBuilder.bindMarker("episode_guid"))
        .value("summary", QueryBuilder.bindMarker("summary"))
        .value("podcast_website_url", QueryBuilder.bindMarker("podcast_website_url"))
        .value("duration", QueryBuilder.bindMarker("duration"))
        .value("subtitle", QueryBuilder.bindMarker("subtitle"))
        .value("order_num", QueryBuilder.bindMarker("order_num"))
        .value("image_url", QueryBuilder.bindMarker("image_url"))
        .value("episode_type", QueryBuilder.bindMarker("episode_type"))
        .value("episode_num", QueryBuilder.bindMarker("episode_num"))
        .value("season_num", QueryBuilder.bindMarker("season_num"))
        .value("title", QueryBuilder.bindMarker("title"))
        .value("author", QueryBuilder.bindMarker("author"))
        .value("keywords", QueryBuilder.bindMarker("keywords"))
        .value("explicit", QueryBuilder.bindMarker("explicit"))
        .value("closed_captioned", QueryBuilder.bindMarker("closed_captioned"))
        .value("updated_at", QueryBuilder.bindMarker("updated_at"))
        .value("episode_url", QueryBuilder.bindMarker("episode_url"))
        .value("description", QueryBuilder.bindMarker("description"))
        .value("content", QueryBuilder.bindMarker("content"))
        .value("comments", QueryBuilder.bindMarker("comments"))
        .value("episode_updated_date", QueryBuilder.bindMarker("episode_updated_date"))
        .value("published_date", QueryBuilder.bindMarker("published_date"));
  }

  public Select selectByPrimaryKeyParts(int parameterCount) {
    Select select = selectStart();
    for (int i = 0; i < parameterCount && i < primaryKeys.size(); i++) {
      String columnName = primaryKeys.get(i);
      select = select.whereColumn(columnName).isEqualTo(QueryBuilder.bindMarker(columnName));
    }
    return select;
  }

  @Override
  public Select selectByPrimaryKey() {
    return selectByPrimaryKeyParts(primaryKeys.size());
  }

  @Override
  public Select selectStart() {
    throwIfKeyspaceMissing();
    SelectFrom selectFrom = (keyspaceId == null)
        ? QueryBuilder.selectFrom(tableId)
        : QueryBuilder.selectFrom(keyspaceId, tableId);
    return selectFrom
        .column("podcast_api")
        .column("podcast_api_id")
        .column("episode_guid")
        .column("summary")
        .column("podcast_website_url")
        .column("duration")
        .column("subtitle")
        .column("order_num")
        .column("image_url")
        .column("episode_type")
        .column("episode_num")
        .column("season_num")
        .column("title")
        .column("author")
        .column("keywords")
        .column("explicit")
        .column("closed_captioned")
        .column("updated_at")
        .column("episode_url")
        .column("description")
        .column("content")
        .column("comments")
        .column("episode_updated_date")
        .column("published_date");
  }

  public DeleteSelection deleteStart() {
    throwIfKeyspaceMissing();
    return (keyspaceId == null)
        ? QueryBuilder.deleteFrom(tableId)
        : QueryBuilder.deleteFrom(keyspaceId, tableId);
  }

  public Delete deleteByPrimaryKeyParts(int parameterCount) {
    if (parameterCount <= 0) {
      throw new MapperException("parameterCount must be greater than 0");
    }
    DeleteSelection deleteSelection = deleteStart();
    String columnName = primaryKeys.get(0);
    Delete delete = deleteSelection.whereColumn(columnName).isEqualTo(QueryBuilder.bindMarker(columnName));
    for (int i = 1; i < parameterCount && i < primaryKeys.size(); i++) {
      columnName = primaryKeys.get(i);
      delete = delete.whereColumn(columnName).isEqualTo(QueryBuilder.bindMarker(columnName));
    }
    return delete;
  }

  @Override
  public Delete deleteByPrimaryKey() {
    return deleteByPrimaryKeyParts(primaryKeys.size());
  }

  @Override
  public DefaultUpdate updateStart() {
    throwIfKeyspaceMissing();
    UpdateStart update = (keyspaceId == null)
        ? QueryBuilder.update(tableId)
        : QueryBuilder.update(keyspaceId, tableId);
    return ((DefaultUpdate)update
        .setColumn("summary", QueryBuilder.bindMarker("summary"))
        .setColumn("podcast_website_url", QueryBuilder.bindMarker("podcast_website_url"))
        .setColumn("duration", QueryBuilder.bindMarker("duration"))
        .setColumn("subtitle", QueryBuilder.bindMarker("subtitle"))
        .setColumn("order_num", QueryBuilder.bindMarker("order_num"))
        .setColumn("image_url", QueryBuilder.bindMarker("image_url"))
        .setColumn("episode_type", QueryBuilder.bindMarker("episode_type"))
        .setColumn("episode_num", QueryBuilder.bindMarker("episode_num"))
        .setColumn("season_num", QueryBuilder.bindMarker("season_num"))
        .setColumn("title", QueryBuilder.bindMarker("title"))
        .setColumn("author", QueryBuilder.bindMarker("author"))
        .setColumn("keywords", QueryBuilder.bindMarker("keywords"))
        .setColumn("explicit", QueryBuilder.bindMarker("explicit"))
        .setColumn("closed_captioned", QueryBuilder.bindMarker("closed_captioned"))
        .setColumn("updated_at", QueryBuilder.bindMarker("updated_at"))
        .setColumn("episode_url", QueryBuilder.bindMarker("episode_url"))
        .setColumn("description", QueryBuilder.bindMarker("description"))
        .setColumn("content", QueryBuilder.bindMarker("content"))
        .setColumn("comments", QueryBuilder.bindMarker("comments"))
        .setColumn("episode_updated_date", QueryBuilder.bindMarker("episode_updated_date"))
        .setColumn("published_date", QueryBuilder.bindMarker("published_date")));
  }

  @Override
  public DefaultUpdate updateByPrimaryKey() {
    return ((DefaultUpdate)updateStart()
        .where(Relation.column("podcast_api").isEqualTo(QueryBuilder.bindMarker("podcast_api")))
        .where(Relation.column("podcast_api_id").isEqualTo(QueryBuilder.bindMarker("podcast_api_id")))
        .where(Relation.column("episode_guid").isEqualTo(QueryBuilder.bindMarker("episode_guid"))));
  }

  @Override
  public void validateEntityFields() {
    CqlIdentifier keyspaceId = this.keyspaceId != null ? this.keyspaceId : context.getSession().getKeyspace().orElse(null);
    String entityClassName = "dataClasses.episode.EpisodeByPodcastRecord";
    if (keyspaceId == null) {
      LOG.warn("[{}] Unable to validate table: {} for the entity class: {} because the keyspace is unknown (the entity does not declare a default keyspace, and neither the session nor the DAO were created with a keyspace). The DAO will only work if it uses fully-qualified queries with @Query or @QueryProvider.",
          context.getSession().getName(),
          tableId,
          entityClassName);
      return;
    }
    if(!keyspaceNamePresent(context.getSession().getMetadata().getKeyspaces(), keyspaceId)) {
      LOG.warn("[{}] Unable to validate table: {} for the entity class: {} because the session metadata has no information about the keyspace: {}.",
          context.getSession().getName(),
          tableId,
          entityClassName,
          keyspaceId);
      return;
    }
    Optional<KeyspaceMetadata> keyspace = context.getSession().getMetadata().getKeyspace(keyspaceId);
    List<CqlIdentifier> expectedCqlNames = new ArrayList<>();
    expectedCqlNames.add(CqlIdentifier.fromCql("podcast_api"));
    expectedCqlNames.add(CqlIdentifier.fromCql("podcast_api_id"));
    expectedCqlNames.add(CqlIdentifier.fromCql("episode_guid"));
    expectedCqlNames.add(CqlIdentifier.fromCql("summary"));
    expectedCqlNames.add(CqlIdentifier.fromCql("podcast_website_url"));
    expectedCqlNames.add(CqlIdentifier.fromCql("duration"));
    expectedCqlNames.add(CqlIdentifier.fromCql("subtitle"));
    expectedCqlNames.add(CqlIdentifier.fromCql("order_num"));
    expectedCqlNames.add(CqlIdentifier.fromCql("image_url"));
    expectedCqlNames.add(CqlIdentifier.fromCql("episode_type"));
    expectedCqlNames.add(CqlIdentifier.fromCql("episode_num"));
    expectedCqlNames.add(CqlIdentifier.fromCql("season_num"));
    expectedCqlNames.add(CqlIdentifier.fromCql("title"));
    expectedCqlNames.add(CqlIdentifier.fromCql("author"));
    expectedCqlNames.add(CqlIdentifier.fromCql("keywords"));
    expectedCqlNames.add(CqlIdentifier.fromCql("explicit"));
    expectedCqlNames.add(CqlIdentifier.fromCql("closed_captioned"));
    expectedCqlNames.add(CqlIdentifier.fromCql("updated_at"));
    expectedCqlNames.add(CqlIdentifier.fromCql("episode_url"));
    expectedCqlNames.add(CqlIdentifier.fromCql("description"));
    expectedCqlNames.add(CqlIdentifier.fromCql("content"));
    expectedCqlNames.add(CqlIdentifier.fromCql("comments"));
    expectedCqlNames.add(CqlIdentifier.fromCql("episode_updated_date"));
    expectedCqlNames.add(CqlIdentifier.fromCql("published_date"));
    Optional<TableMetadata> tableMetadata = keyspace.flatMap(v -> v.getTable(tableId));
    Optional<UserDefinedType> userDefinedType = keyspace.flatMap(v -> v.getUserDefinedType(tableId));
    if (tableMetadata.isPresent()) {
      // validation of missing Clustering Columns
      List<CqlIdentifier> expectedCqlClusteringColumns = new ArrayList<>();
      expectedCqlClusteringColumns.add(CqlIdentifier.fromCql("episode_guid"));
      List<CqlIdentifier> missingTableClusteringColumnNames = findMissingColumns(expectedCqlClusteringColumns, tableMetadata.get().getClusteringColumns().keySet());
      if (!missingTableClusteringColumnNames.isEmpty()) {
        throw new IllegalArgumentException(String.format("The CQL ks.table: %s.%s has missing Clustering columns: %s that are defined in the entity class: %s", keyspaceId, tableId, missingTableClusteringColumnNames, entityClassName));
      }
      // validation of missing PKs
      List<CqlIdentifier> expectedCqlPKs = new ArrayList<>();
      expectedCqlPKs.add(CqlIdentifier.fromCql("podcast_api"));
      expectedCqlPKs.add(CqlIdentifier.fromCql("podcast_api_id"));
      List<CqlIdentifier> missingTablePksNames = findMissingColumns(expectedCqlPKs, tableMetadata.get().getPartitionKey());
      if (!missingTablePksNames.isEmpty()) {
        throw new IllegalArgumentException(String.format("The CQL ks.table: %s.%s has missing Primary Key columns: %s that are defined in the entity class: %s", keyspaceId, tableId, missingTablePksNames, entityClassName));
      }
      // validation of all columns
      List<CqlIdentifier> missingTableCqlNames = findMissingCqlIdentifiers(expectedCqlNames, tableMetadata.get().getColumns().keySet());
      if (!missingTableCqlNames.isEmpty()) {
        throw new IllegalArgumentException(String.format("The CQL ks.table: %s.%s has missing columns: %s that are defined in the entity class: %s", keyspaceId, tableId, missingTableCqlNames, entityClassName));
      }
      // validation of types
      Map<CqlIdentifier, GenericType<?>> expectedTypesPerColumn = new LinkedHashMap<>();
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("episode_num"), GENERIC_TYPE1);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("explicit"), GENERIC_TYPE2);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("episode_updated_date"), GENERIC_TYPE3);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("comments"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("title"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("description"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("author"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("duration"), GENERIC_TYPE5);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("season_num"), GENERIC_TYPE1);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("episode_guid"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("podcast_api"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("content"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("updated_at"), GENERIC_TYPE6);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("keywords"), GENERIC_TYPE);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("subtitle"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("podcast_api_id"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("closed_captioned"), GENERIC_TYPE2);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("podcast_website_url"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("image_url"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("episode_type"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("summary"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("episode_url"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("order_num"), GENERIC_TYPE1);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("published_date"), GENERIC_TYPE3);
      List<String> missingTableTypes = findTypeMismatches(expectedTypesPerColumn, tableMetadata.get().getColumns(), context.getSession().getContext().getCodecRegistry());
      throwMissingTableTypesIfNotEmpty(missingTableTypes, keyspaceId, tableId, entityClassName);
    }
    else if (userDefinedType.isPresent()) {
      // validation of UDT columns
      List<CqlIdentifier> columns = userDefinedType.get().getFieldNames();
      List<CqlIdentifier> missingTableCqlNames = findMissingCqlIdentifiers(expectedCqlNames, columns);
      if (!missingTableCqlNames.isEmpty()) {
        throw new IllegalArgumentException(String.format("The CQL ks.udt: %s.%s has missing columns: %s that are defined in the entity class: %s", keyspaceId, tableId, missingTableCqlNames, entityClassName));
      }
      // validation of UDT types
      Map<CqlIdentifier, GenericType<?>> expectedTypesPerColumn = new LinkedHashMap<>();
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("episode_num"), GENERIC_TYPE1);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("explicit"), GENERIC_TYPE2);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("episode_updated_date"), GENERIC_TYPE3);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("comments"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("title"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("description"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("author"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("duration"), GENERIC_TYPE5);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("season_num"), GENERIC_TYPE1);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("episode_guid"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("podcast_api"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("content"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("updated_at"), GENERIC_TYPE6);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("keywords"), GENERIC_TYPE);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("subtitle"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("podcast_api_id"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("closed_captioned"), GENERIC_TYPE2);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("podcast_website_url"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("image_url"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("episode_type"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("summary"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("episode_url"), GENERIC_TYPE4);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("order_num"), GENERIC_TYPE1);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("published_date"), GENERIC_TYPE3);
      List<CqlIdentifier> expectedColumns = userDefinedType.get().getFieldNames();
      List<DataType> expectedTypes = userDefinedType.get().getFieldTypes();
      List<String> missingTableTypes = findTypeMismatches(expectedTypesPerColumn, expectedColumns, expectedTypes, context.getSession().getContext().getCodecRegistry());
      throwMissingUdtTypesIfNotEmpty(missingTableTypes, keyspaceId, tableId, entityClassName);
    }
    // warn if there is not keyspace.table for defined entity - it means that table is missing, or schema it out of date.
    else {
      LOG.warn("[{}] There is no ks.table or UDT: {}.{} for the entity class: {}, or metadata is out of date.",
          context.getSession().getName(),
          keyspaceId,
          tableId,
          entityClassName);
    }
  }
}

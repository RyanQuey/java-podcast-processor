package cassandraHelpers;

import com.datastax.oss.driver.api.core.CqlIdentifier;
import com.datastax.oss.driver.internal.mapper.DaoCacheKey;
import com.datastax.oss.driver.internal.mapper.DefaultMapperContext;
import dataClasses.episode.EpisodeByPodcastDao;
import dataClasses.episode.EpisodeByPodcastDaoImpl__MapperGenerated;
import dataClasses.podcast.PodcastByLanguageDao;
import dataClasses.podcast.PodcastByLanguageDaoImpl__MapperGenerated;
import dataClasses.searchQuery.SearchQueryByTermDao;
import dataClasses.searchQuery.SearchQueryByTermDaoImpl__MapperGenerated;
import java.lang.Override;
import java.lang.String;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/**
 * Do not instantiate this class directly, use {@link InventoryMapperBuilder} instead.
 *
 * <p>Generated by the DataStax driver mapper, do not edit directly.
 */
public class InventoryMapperImpl__MapperGenerated implements InventoryMapper {
  private final DefaultMapperContext context;

  private final ConcurrentMap<DaoCacheKey, PodcastByLanguageDao> podcastByLanguageDaoCache = new ConcurrentHashMap<>();

  private final ConcurrentMap<DaoCacheKey, EpisodeByPodcastDao> episodeByPodcastDaoCache = new ConcurrentHashMap<>();

  private final ConcurrentMap<DaoCacheKey, SearchQueryByTermDao> searchQueryByTermDaoCache = new ConcurrentHashMap<>();

  public InventoryMapperImpl__MapperGenerated(DefaultMapperContext context) {
    this.context = context;
  }

  @Override
  public PodcastByLanguageDao podcastByLanguageDao(String table) {
    DaoCacheKey key = new DaoCacheKey((CqlIdentifier)null, table, null, null);
    return podcastByLanguageDaoCache.computeIfAbsent(key, k -> PodcastByLanguageDaoImpl__MapperGenerated.init(context.withDaoParameters(k.getKeyspaceId(), k.getTableId(), k.getExecutionProfileName(), k.getExecutionProfile())));
  }

  @Override
  public EpisodeByPodcastDao episodeByPodcastDao(String table) {
    DaoCacheKey key = new DaoCacheKey((CqlIdentifier)null, table, null, null);
    return episodeByPodcastDaoCache.computeIfAbsent(key, k -> EpisodeByPodcastDaoImpl__MapperGenerated.init(context.withDaoParameters(k.getKeyspaceId(), k.getTableId(), k.getExecutionProfileName(), k.getExecutionProfile())));
  }

  @Override
  public SearchQueryByTermDao searchQueryByTermDao(String table) {
    DaoCacheKey key = new DaoCacheKey((CqlIdentifier)null, table, null, null);
    return searchQueryByTermDaoCache.computeIfAbsent(key, k -> SearchQueryByTermDaoImpl__MapperGenerated.init(context.withDaoParameters(k.getKeyspaceId(), k.getTableId(), k.getExecutionProfileName(), k.getExecutionProfile())));
  }
}
